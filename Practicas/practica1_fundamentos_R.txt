
### Ayuda de R
    ### Proporciona todas las funciones relacionadas con regresión
help.search( "regression")

     ### Carga la librería stats
library( stats)

         ## Para ver las funciones implementadas dentro del paquete stats
help( package=stats )

      ## Ayuda sobre una función concreta
help( loess )

##### Objetos de R
### Vectores, Matrices y Arrays, Data Frames, listas

    ### Vectores
        ### a) Vectores numéricos

        ## 1) Creación de vectores
        vector.ejemplo1.nume <- c( 5, 7, 9, 20)

        ## Creación vector con secuencia valores
        vector.seq.0.100 <- seq( 1, 100, by=1 )
        vector.seq.0.100 <- 1:100

        vector.seq.0.1.100 <- seq( 0, 1, length=100)
        
        ## Creación vector repitiendo valores o secuencias de valores
        vector.300a.700r <- rep( c( 1, 0), c(300, 700) )
        vector.rep <- rep( c(1,0), 100)

        ### 2) Acceso a las posiciones de un vector
        vector.seq.0.100[ c(3,8,20 ) ]
         # índices negativos eliminan las posiciones señaladas por el vector de índices
        vector.seq.0.100[ -c(3,8,20 ) ]
        ### Se pueden utilizar expresiones lógicas para seleccionar elementos del vector
        vector.seq.0.100[ vector.seq.0.100> 80 ]
        vector.seq.0.100[ vector.seq.0.100> 80 & vector.seq.0.100< 90 ]
        vector.seq.0.100[ vector.seq.0.100> 80 | vector.seq.0.100< 10 ]

        ## 3) Operaciones con vectores
        vector.seq.0.100[ 1:10 ] + seq( 0, 1, length=10 )
        
        sqrt( vector.seq.0.100[ 1:10 ] )
        log( vector.seq.0.100[ 1:10 ] )
        ( vector.seq.0.100[ 1:10 ] )^3
        
        min( vector.seq.0.100[ 1:10 ] )
        max( vector.seq.0.100[ 1:10 ] )
        mean( vector.seq.0.100[ 1:10 ] )
        sd( vector.seq.0.100[ 1:10 ] )
        var( vector.seq.0.100[ 1:10 ] )

        ### b) Vectores de tipo carácter
        vector.ejemplo.caracter <- c( "ana", "juan", "pedro")
        vector.ejemplo.caracter.rep <- rep( c( "ana", "juan", "pedro"), c(10, 30, 10 ) )
        vector.creditos.caracter <- rep( c("aceptado", "denegado"), c(300, 700) )
        
        ### Se puede transformar un vector carácter en un factor
        vector.ejemplo.caracter.rep.factor <- factor( vector.ejemplo.caracter.rep )
        vector.ejemplo.caracter.rep.factor

[1] ana   ana   ana   ana   ana   ana   ana   ana   ana   ana   juan  juan  juan  juan  juan
[16] juan  juan  juan  juan  juan  juan  juan  juan  juan  juan  juan  juan  juan  juan  juan
[31] juan  juan  juan  juan  juan  juan  juan  juan  juan  juan  pedro pedro pedro pedro pedro
[46] pedro pedro pedro pedro pedro
Levels: ana juan pedro

        ## Búsqueda de expresiones en vectores caracter
        match(  vector.creditos.caracter, "aceptado")
        
    ### b) Matrices
    ### Creación de matrices
     matriz.4.4 <- matrix( nrow=4, ncol=4, data=1:16 )
     ### Si queremos llenar la matriz por filas
     matriz.4.4 <- matrix( nrow=4, ncol=4, data=1:16, byrow=T )
     
     ### Acceso a filas y columnas de la matriz
     matriz.4.4[ c(2,3), 3:4 ]

     ## Se puede acceder a una fila o columna utilizando condiciones lógicas
    suma.fila.matriz.4.4 <- c( sum( matriz.4.4[1, ] ), sum( matriz.4.4[2, ] ), sum( matriz.4.4[3, ] ), sum( matriz.4.4[4, ] ) )
    matriz.4.4[ suma.fila.matriz.4.4 < 40, ]
    matriz.4.4[ suma.fila.matriz.4.4 < 50 & suma.fila.matriz.4.4> 10 , ]
    
    ### Funciones recursivas para aplicarlas a cada fila o columna de una matriz
    ### El objetivo de estas funciones es evitar la utilización de bucles for etc.
    suma.fila.matriz.4.4.apply <- apply( matriz.4.4, MARGIN=1, FUN='sum')

    max.columna.matriz.4.4 <- apply( matriz.4.4, MARGIN=2, FUN='max')
    
    matriz.4.4[ , max.columna.matriz.4.4 > 13 ]
    
    ### Operaciones con matrices

    ### Producto componente a componente
    matriz.4.4 * matriz.4.4.quad

    ## Producto matricial
    matriz.4.4 %*% matriz.4.4.quad
    
    ### Traspuesta de una matriz
    t( matriz.4.4 )
    
    t( matriz.4.4 ) %*% matriz.4.4
    crossprod( matriz.4.4 )
    
    ### Dimensión matriz, nombres filas columnas
    ## Asignar nombre a las filas
    rownames(matriz.4.4)
    NULL
    
    rownames(matriz.4.4) <- c("x1", "x2", "x3", "x4")
    
    ## Asignar nombre columnas
    colnames(matriz.4.4) <- c("edad", "ingresos", "educacion", "respuesta")
    matriz.4.4
    
    ### c) Arrays
    ### Son objetos más generales que las matrices puediendo ser tridimensionales ...
    
    ### Creación (creamos un objeto que almacena 4 matrices 5x5
    
    array.4.5.5 <- array( dim= c(5,5, 4), data=1:100 )
    
    ### Dimensión array
    dim( array.4.5.5)
    #### Seleccionar elementos array

    array.4.5.5[ , , c(3,4) ]
    
    #### Concatenacion de arrays y matrices por filas y columnas

    ### concatenar por filas
    array.conc.fil <- rbind( array.4.5.5[ , , 3], array.4.5.5[ , , 4] )
    array.conc.fil
    
    ### concatenar por columnas
    array.conc.col <- cbind( array.4.5.5[ , , 3], array.4.5.5[ , , 4] )
    array.conc.col
    
    ### d) Data frames

    ### Permiten incluir en el mismo objeto matrices, arrays, vectores numéricos y carácter
    ### con la única restricción de tener el mismo número de filas
    
    ### Creación data frames
    ejemplo.data.frame <- data.frame( matriz1 =  matriz.4.4, matriz.quad = matriz.4.4.quad, resultado = resultado)
    ejemplo.data.frame
    
    ### Acceso a los elementos del data frame
     ejemplo.data.frame[ c(2,3), ] ## filas 2,3
     ejemplo.data.frame[ , 9 ] ## columna 9
     ejemplo.data.frame$resultado ## Equivalente a acceder a la columna 9 que se llama resultado
     ejemplo.data.frame$resultado[1:2] ### Seleccionamos los dos primeros valores de esa columna.

     ### Seleccion de todas columnas correspondientes a matriz1
     ejemplo.data.frame[ , grep( "matriz1", colnames( ejemplo.data.frame ) ) ]
     
     ### e) Listas
     
     ### Las listas son estructuras que pueden almacenar cualquier tipo de objeto
     
     ### Creación de listas
 ejemplo.lista <- list( data.frame1 = ejemplo.data.frame, matriz1 = matriz.4.4, matriz.quad = matriz.4.4.quad, vector=resultado)

     ### Acceso a los elementos de una lista
     ejemplo.lista$matriz1
     
      ### Proporciona el nombre de los elementos de la lista
      attributes(ejemplo.lista )









  #################################
  ### FUNCIONES DE ENTRADA/SALIDA
  #################################
  
  #### Funciones que trabajan con datos grabados en TEXTO PLANO
  
  ## a) Funciones para grabar y leer matrices, data frames (tablas)
  write.table( ejemplo.data.frame, file="data_frame_R.txt" )
  
  ejemplo.lectura.tabla <- read.table( file="data_frame_R.txt" )

  ###b) Funciones para grabar y leer objetos en BINARIO
  save( ejemplo.lectura.tabla, file="ejemplo_tabla.dat")
  
  # Tb podemos guardar varios objetos en un único fichero
  save( list=c("ejemplo.lectura.tabla", "ejemplo.data.frame", "matriz.4.4") , file="ejemplo_tabla.dat")

  load( file="ejemplo_tabla.dat" )
  
  ##################################
  ## Programación de funciones en R
  ##################################
  
  ### Definición de una función
  funcion.ejemplo1 <- function( matriz, vector, c=1 )
  {
  ## matriz: Es una matriz cuadrada de dimen n x n
  ## vector: Vector de tipo numérico
  ## c : constante por defecto = 1
  
  
  }
  
  ### Instrucciones que se utilizan en la probramación de funciones
     a) Sentencias condicioneles if
     if ( expresion lógica 1)
     {
     ### Operaciones
     } else
     ## Segundo grupo operaciones
     }
  
     b) Bucles for
     for( i in 1:n )
     {
      ### Operaciones del bucle
     }
     
     c) Bucle while
     while( condicion )
     {
      ### Mientras condicion sea cierta
     }

     ### Cargar una función en R
     source("Z://ejemplo_programacion1.txt")
     
### Funciones de depuración
    ## Introduce una llamada al depurador
    browser()
Browse[1]>
n ### Indica al depurador que se ejecute la siguiente operación
c ### Continua la ejecución hasta el siguiente browser()
Q ### Indica al depurador que salga de la ejecución paso a paso


###################################
### Funciones estadísticas básicas
###################################

## A) Dada una distribución de probabilidad y sus parámetros calcular la
## densidad de probabilidad en un conjunto de puntos

ejemplo.dnorm <- dnorm( x=seq(-0.1, 0.1, length=10), mean=0, sd=0.1 )
ejemplo.dnorm

### b) Generar una muestra finita de datos distribuidos según una determinada
### distribución de probabilidad.

ejemplo.datos.rnorm <- rnorm( n= 100, mean=0, sd=0.1 )
hist( ejemplo.datos.rnorm, breaks=20 )

      c) Simulación de datos según una distribución multivariante
      
      library(MASS)
ejemplo.datos.norm.multiv <- mvrnorm( n=300, mu=c(0,0), Sigma=matrix( nrow=2, ncol=2, data=c(0.1, 0, 0, 0.01) ) )

########################
# Funciones gráficas
########################

## a) Funciones univariantes
x <- seq(-5, 5, length=100)
f.univ <- function( x ) x^2 + 1

y <- f.univ(x)

y <- f.univ(x)
plot( x, y, xlim=c(-4,4), ylim=range(y), main="función univariante", col="red", pch="o", type="l" )
plot( x, y, xlim=c(-4,4), ylim=range(y), main="función univariante", col="red", pch="o", type="b" )
plot( x, y, xlim=c(-4,4), ylim=range(y), main="función univariante", col="red", pch="o", type="p" )
plot( x, y, xlim=c(-4,4), ylim=range(y), xlab="f.x", ylab="f.y", main="función univariante", col="red", pch="o", type="p" )

### b) Visualizar distribuciones en 2 dimensiones

plot( normal.dos.dimensiones, xlab="x", ylab="y", col="green", main="distribucion normal mult")
plot( normal.dos.dimensiones[, 1], normal.dos.dimensiones[, 2], xlab="x", ylab="y", col="green", main="distribucion normal mult")

#### c ) Visualizar una función de 2 variables

### Representación tridimensional
x <- seq( -5, 5, length=100 )
y <- seq( -5, 5, length=100 )

funcion.x.y <- function( x, y) x^2 + y^2 + 1

z <- outer( x, y, "funcion.x.y")

persp( x, y, z, theta=30, phi=90, col=2 )

 ### Curvas de nivel
 contour( x, y, z, col=3 )
 
 ### Gráficos de color: Asignan a cada punto un color proporcional el valor de f
 
 image( x, y, z, col=gray( (0:30)/30) )

