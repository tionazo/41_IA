
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Práctica con Sistema Neurodifuso ANFIS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%1) Problema de predicción

%%%% Generamos la función sinc(x,y) = sin(x) sin(y)/ (x y)

point_n = 30;
x = linspace(-10, 10, point_n);
y = linspace(-10, 10, point_n);
[xx, yy] = meshgrid(x, y);

tmp1 = sin(xx)./(xx);
tmp2 = sin(yy)./(yy);
zz = tmp1.*tmp2;
matriz_train = [xx(:) yy(:) zz(:)];

mesh(xx, yy, zz)

%%%% Opciones entrenamiento

ss = 0.1;
ss_dec_rate = 0.9;
ss_inc_rate = 1.1;
mf_type = 'gbellmf';
mf_n = 4; % 16 reglas
epoch_n=200;


%% Creamos la estructura inicial para ANFIS via partición del espacio
in_fismat = genfis1(matriz_train, mf_n, mf_type);

%%% Entrenamos ANFIS
[out_fismat trn_error step_size] = ...
anfis(trn_data, in_fismat, [epoch_n nan ss ss_dec_rate ss_inc_rate], ...
[1,1,1,1]);

%%%% Evaluamos ANFIS sobre el conjunto de datos

z_anfis = evalfis([xx(:) yy(:)], trn_out_fismat);

%% Evaluar el error cuadrático medio
%% Comparar los errores con el perceptrón

%%% 2) Predicción de la serie caótica Mackey-Glass
%%% \dot(x) = (a * x(t-tau) )/(1 + x^10(t-tau) ) - b * x(t)
%%%%% Cargar los datos y preparar las matrices

epoch_n=10;
mf_n=2;

%%%%% Generamos los datos
%%% x(0) = 1.2, tau=17, a=0.2, b=0.1, deltat = 0.1;
%%% sample_n = 1000;

a        = 0.2;    
b        = 0.1;   
tau      = 17;	
x0       = 1.2;
deltat   = 0.1;
sample_n = 1000;
interval = 1;	

mgdata = mackeyglass();
time = mgdata(:, 1);
ts = mgdata(:, 2);
trn_data = zeros(500, 5);
chk_data = zeros(500, 5);

% Obtener el conjunto entrenamiento
start = 101;
trn_data(:, 1) = ts(start:start+500-1); 
start = start + 6;
trn_data(:, 2) = ts(start:start+500-1); 
start = start + 6;
trn_data(:, 3) = ts(start:start+500-1); 
start = start + 6;
trn_data(:, 4) = ts(start:start+500-1); 
start = start + 6;
trn_data(:, 5) = ts(start:start+500-1); 

% Obtener el conjunto de test
start = 601;
test_data(:, 1) = ts(start:start+500-1); 
start = start + 6;
test_data(:, 2) = ts(start:start+500-1); 
start = start + 6;
test_data(:, 3) = ts(start:start+500-1); 
start = start + 6;
test_data(:, 4) = ts(start:start+500-1); 
start = start + 6;
test_data(:, 5) = ts(start:start+500-1); 

% Generamos la estructura para ANFIS
mf_type = 'gbellmf';
in_fismat = genfis1(trn_data, mf_n, mf_type);

% Parámetros
ss = 0.1;
mf_type = 'gbellmf';

[trn_out_fismat trn_error step_size test_out_fismat test_error] = ...
	anfis(trn_data, in_fismat, [epoch_n nan ss nan nan], [1,1,1,1], test_data);

anfis_output = evalfis(test_data, trn_out_fismat);
